snippet template
#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <string>
#include <cstdint>
#include <unistd.h>
#include <typeinfo>
#include <cctype>
#include <algorithm>

#define a_sizeof(x) sizeof(x) / sizeof(x[0])
#define show(a) cout << a << endl
#define show_ar(a) for (int i=0; i<a_sizeof(a); ++i) cout << a[i] << endl
#define NOPOS -1

using std::cout;
using std::cin;
using std::cerr;
using std::endl;
using std::string;

int main(int argc, const char* argv[]) {

	$1
    
    return EXIT_SUCCESS;
}
endsnippet

snippet full
/***************************************************************
CSCI 240         Program $1     Fall 2023

Programmer: Nathan Warner
 
Section: 001

Date Due: $2

Purpose: $3
***************************************************************/
#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <string>

#ifndef SHOW
#define show(a) cout << a << endl
#endif

#ifndef NOPOS
#define NOPOS -1
#endif

using std::cout;
using std::cin;
using std::cerr;
using std::endl;
using std::string;

int main(int argc, const char *argv[]) {

    return EXIT_SUCCESS;
}
endsnippet

snippet includes "known includes" i
#include <iostream>
#include <iomanip>
#include <fstream>
#include <string>
#include <typeinfo>
#include <cstdlib>
#include <vector>
#include <cmath>
#include <algorithm>
#include <ctime>
#include <array>
#include <vector>
#include <memory>
endsnippet

snippet tmp
#include <iostream>
#include <iomanip>
#include <fstream>
#include <string>
#include <typeinfo>
#include <cstdlib>
#include <vector>
#include <cmath>
#include <algorithm>
#include <ctime>
#include <memory>
#include <cstring>
#include <cstdint>
#include <array>


#define sizeofarr(x) sizeof(x) / sizeof(x[0])
#define show(a) cout << a << endl

#define sizeT size_t
#define S& string&
#define I& int&

using std::cout;
using std::cin;
using std::endl;
using std::string;


int main(int argc, const char *argv[]) {
    
    


    return EXIT_SUCCESS;
}
endsnippet

snippet remark
/*<remark> 
$1
</remark>*/
endsnippet

snippet summary
/*<summary> 
$1
</summary>*/
endsnippet

snippet nit
/*<nit> 
$1
</nit>*/
endsnippet

snippet fdesc
// Function $1
/***************************************************************
Function: $2

Use: $3

Arguments: $4

Returns: $5

Notes: $6
***************************************************************/
endsnippet

snippet seed
unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
endsnippet


